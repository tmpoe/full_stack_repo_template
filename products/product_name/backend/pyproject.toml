[tool.poetry]
name = "fastapi-backend-template"
version = "0.0.1"
description = "Example project written in FastAPI."
authors = ["Matyas File <filematyi@gmail.com>"]
readme = "README.md"
packages = [
    { include = "backend"}
]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.0"
uvicorn = "^0.30.0"
sqliteframe = "^0.3.1"
mongoengine = "^0.28.2"


[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
nox = "^2024.4.15"
ruff = "^0.4.4"
pytest-asyncio = "^0.23.7"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
pydocstyle = "^6.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
include = [
    ".py"
]
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    "ANN", # force annotations
    "ARG", # report unused args
    "BLE", # boolean trap guard
    "C",   # pylint conventions
    "C4",  # better list/set/dict comprehensions
    "COM", # trailing comma validation
    "D",   # pydocstyle compliance
    "E",   # guard against hard-to-spot mistakes that might lead to critical errors
    "EM",  # nicer error messages
    "ERA", # guard against commented out code
    "F",   # Pyflakes, included in default
    "G",   # force proper logger invocation
    "I",   # sorting
    "ICN", # force import naming conventions
    "INP", # guard against implicit namespace packages
    "ISC", # flake8 rules
    "N",   # force PEP8 naming conventions
    "PIE", # guard against unnecessary/duplicate statements/expressions
    "PL",  # pylint
    "PYI", # enable type hinting stub files support
    "Q",   # unify quotes
    "RET", # simplify functions by omitting unnecessary branches and return statements
    "RSE", # guard against common exception raising pitfalls
    "S",   # guard against insecure statements/expressions
    "SLF", # guard against private member access
    "T20", # guard against print statements
    "TID", # introduce module banning and force absolute imports
    "W",   # pycodestyles errors and warnings
]
ignore = [
    "D100"
]
fixable = ["ALL"]  # Allow fix for all enabled rules (when `--fix`) is provided.
unfixable = []


[tool.ruff.lint.pydocstyle]
convention = "numpy"